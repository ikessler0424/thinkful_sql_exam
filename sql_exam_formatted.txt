--1
SELECT
   column_name,
   data_type 
FROM
   information_schema.columns 
WHERE
   table_name = 'naep';

--2
SELECT
   * 
FROM
   naep LIMIT 50;

--3
SELECT
   naep.state,
   COUNT(avg_math_4_score),
   AVG(avg_math_4_score),
   MIN(avg_math_4_score),
   MAX(avg_math_4_score) 
FROM
   naep 
GROUP BY
   naep.state 
ORDER BY
   naep.state ASC;

--4
SELECT
   naep.state,
   COUNT(avg_math_4_score),
   AVG(avg_math_4_score),
   MIN(avg_math_4_score),
   MAX(avg_math_4_score) 
FROM
   naep 
GROUP BY
   naep.state 
HAVING
   MAX(avg_math_4_score) - MIN(avg_math_4_score) > 30 
ORDER BY
   naep.state ASC;

--5
SELECT
   sq.bottom_10_states 
FROM
   (
      SELECT
         naep.state AS bottom_10_states,
         MIN(avg_math_4_score) 
      FROM
         naep 
      WHERE
         naep.year = 2000 
      GROUP BY
         naep.state 
      ORDER BY
         2 LIMIT 10
   )
   AS sq 
ORDER BY
   sq.bottom_10_states;

--6
SELECT
   ROUND(AVG(avg_math_4_score), 2) AS average_states_y2000 
FROM
   naep 
WHERE
   naep.year = 2000;

--7
WITH avg_cte AS 
(
   SELECT
      naep.state AS states,
      AVG(avg_math_4_score) AS average 
   FROM
      naep 
   WHERE
      naep.year = 2000 
   GROUP BY
      naep.state 
)
SELECT
   states AS below_average_states_y2000 
FROM
   avg_cte 
WHERE
   average < (
   SELECT
      AVG(avg_math_4_score) 
   FROM
      naep 
   WHERE
      naep.year = 2000);

--8
SELECT DISTINCT
   naep.state AS scores_missing_y2000 
FROM
   naep 
WHERE
   avg_math_4_score IS NULL 
   AND naep.year = 2000;

--9
SELECT
   n.state AS states,
   ROUND(avg_math_4_score, 2) AS score,
   total_expenditure 
FROM
   (
      SELECT
         * 
      FROM
         naep 
      WHERE
         naep.year = 2000 
         AND avg_math_4_score IS NOT NULL
   )
   AS n 
   LEFT OUTER JOIN
      (
         SELECT
            * 
         FROM
            finance 
         WHERE
            finance.year = 2000
      )
      AS f 
      ON n.id = f.id 
ORDER BY
   total_expenditure DESC;